.. raw:: html
   :file: ../aux/default.html

.. include:: ../aux/default_roles.rst

.. container:: centeredtitle

   Data Types

.. container:: centeredauthor

   Jae-Joon Lee (KASI)


----

Data Type (class or type)

Data types. A data type is a set of values and a set of operations on
those values.

 - :red:`attributes`

   - Data that refers to the object's state

   - Internal representation of the Data


 - :red:`methods`

   - Functions associated with the Data Type

----

Computer (class, type)
----------------------

- attributes

  - output displays, input devices, ram, hard disk, etc.

- methods

  - turn on/off

  - connect a mouse

  - connet to an external projector

  - print a file

----

An instance of the Computer class
---------------------------------

- My Computer (object, instance)

 - output displays : LCD (1280 x 720)

 - input devices : keyboard, track point

 - ram : 4 Gbyte

 - hard disk : 300 Gbyte

 - external storage : []

----

Attributes and Methods
----------------------

- Each instance of the class has its own attributes.

- Methods are often shared among instances of the class.


Often, it is better to distinguish between

- class attributes : shared among instances.

- instance attributes : different for different instances.

----

Classes in Python
-----------------

- all the types you have learned so far are classes.

  - int, float, str, bool

- instances

 - 0, 1, 2, 3, ..

 - 0.1, 1.3e-10

 - "abc", "Hello world!"

 - True, False

----

Referencing Attribute
---------------------

Use "."

- primary.identifier

- If the primary is an object (instance), it first checks if the
  object has an instance attribute of "identifier".

- If there is no instance attribute or if the primary is a class, it
  checks for a class attribute of "identifier".

- Similar to name space look up (local , global)

----

Complex
-------

.. code-block:: python

    c1 = 2 + 3j
    print c1
    print c1.real # 2
    print c1.imag # 3
    print c1.conjugate # <built-in method conjugate of complex object ..
    c2 = c1.conjugate() # call the method (function) "c1.conjugate"
    print c2.imag
    print 2+3j == complex(2, 3)

----

.. container:: fullslide

   .. image:: ComplexDataType.png
      :class: autofit


----

string
------

a string is a sequence of characters

- "abcdefghijk"

  - :red:`str` is a class, and "abc" is an instance of :red:`str`.

  - find, replace, etc

  .. code-block:: python

          s = "abcdefghijk"
	  s.find("c") # 2
	  s.find("gh") # 6
	  s.find("ghb") # -1, search failed

----

- Strings are :red:`immutable`!

- More about this later.

----

Lists
-----

finite :red:`ordered` sets of :red:`arbitrary` Python objects.

- created by placing a comma-separated list of expressions in square
  brackets.

    - [1, 2, 3]

    - [1, "abc", 3.]


- indexed by non-negative numbers

- The built-in function len() returns the number of items

----

list vs. str
------------

- Data representation

 - list : :red:`ordered` sets of :red:`arbitrary` Python objects.

 - str : :red:`ordered` sets of characters.

- But they have quite different set of methods


----

Sequences
---------

finite :red:`ordered` sets of something

- indexed by non-negative numbers

- The built-in function len() returns the number of items

----

Indexing and Slicings
---------------------

- Indexing (Subscriptions)

    .. code-block:: python

        primary[expression]

- Slicings

    .. code-block:: python

        primary[start:end]
        primary[start:end:stride]

    - :red:`stride` is optional and default is 1

----

Example
-------

- slicing with negative strides can be confusing.

   .. code-block:: python

        a = [1, 2, 3, 4, 5]
        print a[::-1]
	print a[4::-1] # ??
	print a[4:0:-1] # ??
	print a[1:4:-1] # ??

- slicing returns a new list

    .. code-block:: python

        a[3] = 0
        a[4:5] = ["a", "b", "c"]


.. code-block:: python

        b = a[:]
	b[3] = "123"

----

.. image:: string_diagram.png
      :class: autofit

----

Method of lists
---------------

- append, pop, insert, remove

- reverse, sort

Pythonâ€™s lists are :red:`variable-length arrays`, not Lisp-style linked lists.

----

Dictionary
----------


:red:`dict` represent finite sets of objects indexed by :red:`arbitrary index`
sets.

- The subscript notation '[]' selects the item indexed by k from the
  dictionary.

  .. code-block:: python

        d = {"one":1, "two":2, "three":3}
	print d["one"]
	d["two"] = 20 # {"one":1, "two":20, "three":3}

----

Tuples
------

Similar to the list, but is immutable.

- immutable object

   - an object whose state(attributes) cannot be modified after it is created.

.. code-block:: python

        t = ("one", "two", "three")
	print t[0] # "one"
	t[1] = "twenty" # exception is raised

----

List vs. Tuples
---------------

:red:`Tuples have structure, lists have order.`

- :red:`Tuples` (generally) are sequences of different kinds of stuff, and
  you deal with the tuple as a coherent unit.

- :red:`Lists` (generally) are sequences of the same kind of stuff, and you
  deal with the items individually.

----

Dictionary Implementation
-------------------------

.. code-block:: python

        d = {"Lisa Smith":"521-8976",
	     "John Smith":"521-1234"}

.. image:: http://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Hash_table_5_0_1_1_1_1_0_SP.svg/380px-Hash_table_5_0_1_1_1_1_0_SP.svg.png
   :height: 450

----

an algorithm is an :red:`effective` method expressed as a
:red:`finite` list of :red:`well-defined` instructions for calculating
something.

Often, Algorithms define Data Types

----

Further readings
----------------



Tutorial 5 - 5.1.1, 5.2 - 5.8

----


tree

dictionary

